syntax = "proto3";

package bean;


//用来记录链路的相关对象
message Trace{
    //平台标识
    string platform=1;
    //数据标识  自定义的请求标识或者数据标识
    string customId=2;
    //链路标识
    string traceId=3;
    //流转的上层链路标识
    string fromId=4;
    //预计的超时时间 如果链路必须标记结束(flag=true)才生效
    int32 timeout=5;
    //发生操作的时间
    int64 times=6;
    //进行的操作  链路的开启/结束/生命周期中做的各种操作
    string operate=7;
    //如果操作为开启链路 表示此链路是否必须有对应的结束操作
    bool flag=8;
    //进行操作的用户标识
    string userId=9;
    //进行操作的用户名称
    string userName=10;
}

//用来记录节点的相关对象
message Span{
    //父级链路标识
    string traceId=1;
    //节点标识
    string spanId=2;
    //流转的上层链路标识
    string fromId=3;
    //预计的超时时间 如果节点必须标记结束(flag=true)才生效
    int32 timeout=4;
    //发生操作的时间
    int64 times=5;
    //进行的操作  节点的开启/结束
    string operate=6;
    //如果操作为开启节点 表示此节点是否必须有对应的结束操作
    bool flag=7; 
     //平台标识
     string platform=8;
}


//用来描述链路/节点生命周期内任何事件的标记
message Tag{
    //关联的链路或者节点Id
    string ownId=1;
    //tag标识
    string tagId=2; 
    //事件描述的内容
    string desc=3;   
     //事件发生的时间
    int64 times=4;  
    //是否需要记录到日志库中
    bool logging=5;  
    //平台标识
    string Platform=6;
    //日志级别 在logging=true时生效
    string logLevel=7;
}

//用来记录需要保存到日志数据库的信息
message Log{
    //平台标识
    string platform=1;
    //日志标识
    string logId=2;
    //日志内容
    string content=3;
    //记录时间
    int64 times=4;
    //日志级别
    string level=5;
}

message ping{
    bool ping =1;
}
message pong{
    bool pong=1;
}

message baseResponse {
    //返回码
    int32 code = 1;
    //返回信息
    string message = 2;
}


service TraceHandler {
    rpc AddTrace(Trace) returns (baseResponse) {}
}

service SpanHandler {
    rpc AddSpan(Span) returns (baseResponse) {}
    
}
service TagHandler{
    rpc AddTag(Tag) returns (baseResponse) {} 
}

service LogHandler{
    rpc AddLog(Log) returns (baseResponse) {} 
}


service keepAlive {
    rpc Ping(ping) returns (pong) {}
}

