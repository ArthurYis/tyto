// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bean/tyto.proto

package bean

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//用来记录链路的相关对象
type Trace struct {
	//平台标识
	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	//数据标识  自定义的请求标识或者数据标识
	CustomId string `protobuf:"bytes,2,opt,name=customId,proto3" json:"customId,omitempty"`
	//链路标识
	TraceId string `protobuf:"bytes,3,opt,name=traceId,proto3" json:"traceId,omitempty"`
	//流转的上层链路标识
	FromId string `protobuf:"bytes,4,opt,name=fromId,proto3" json:"fromId,omitempty"`
	//预计的超时时间 如果链路必须标记结束(flag=true)才生效
	Timeout int32 `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	//发生操作的时间
	Times int64 `protobuf:"varint,6,opt,name=times,proto3" json:"times,omitempty"`
	//进行的操作  链路的开启/结束/生命周期中做的各种操作
	Operate string `protobuf:"bytes,7,opt,name=operate,proto3" json:"operate,omitempty"`
	//如果操作为开启链路 表示此链路是否必须有对应的结束操作
	Flag bool `protobuf:"varint,8,opt,name=flag,proto3" json:"flag,omitempty"`
	//进行操作的用户标识
	UserId string `protobuf:"bytes,9,opt,name=userId,proto3" json:"userId,omitempty"`
	//进行操作的用户名称
	UserName             string   `protobuf:"bytes,10,opt,name=userName,proto3" json:"userName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Trace) Reset()         { *m = Trace{} }
func (m *Trace) String() string { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()    {}
func (*Trace) Descriptor() ([]byte, []int) {
	return fileDescriptor_65eadb3a877d1afd, []int{0}
}

func (m *Trace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trace.Unmarshal(m, b)
}
func (m *Trace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trace.Marshal(b, m, deterministic)
}
func (m *Trace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trace.Merge(m, src)
}
func (m *Trace) XXX_Size() int {
	return xxx_messageInfo_Trace.Size(m)
}
func (m *Trace) XXX_DiscardUnknown() {
	xxx_messageInfo_Trace.DiscardUnknown(m)
}

var xxx_messageInfo_Trace proto.InternalMessageInfo

func (m *Trace) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *Trace) GetCustomId() string {
	if m != nil {
		return m.CustomId
	}
	return ""
}

func (m *Trace) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func (m *Trace) GetFromId() string {
	if m != nil {
		return m.FromId
	}
	return ""
}

func (m *Trace) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *Trace) GetTimes() int64 {
	if m != nil {
		return m.Times
	}
	return 0
}

func (m *Trace) GetOperate() string {
	if m != nil {
		return m.Operate
	}
	return ""
}

func (m *Trace) GetFlag() bool {
	if m != nil {
		return m.Flag
	}
	return false
}

func (m *Trace) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Trace) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

//用来记录节点的相关对象
type Span struct {
	//父级链路标识
	TraceId string `protobuf:"bytes,1,opt,name=traceId,proto3" json:"traceId,omitempty"`
	//节点标识
	SpanId string `protobuf:"bytes,2,opt,name=spanId,proto3" json:"spanId,omitempty"`
	//流转的上层链路标识
	FromId string `protobuf:"bytes,3,opt,name=fromId,proto3" json:"fromId,omitempty"`
	//预计的超时时间 如果节点必须标记结束(flag=true)才生效
	Timeout int32 `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	//发生操作的时间
	Times int64 `protobuf:"varint,5,opt,name=times,proto3" json:"times,omitempty"`
	//进行的操作  节点的开启/结束
	Operate string `protobuf:"bytes,6,opt,name=operate,proto3" json:"operate,omitempty"`
	//如果操作为开启节点 表示此节点是否必须有对应的结束操作
	Flag bool `protobuf:"varint,7,opt,name=flag,proto3" json:"flag,omitempty"`
	//平台标识
	Platform             string   `protobuf:"bytes,8,opt,name=platform,proto3" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Span) Reset()         { *m = Span{} }
func (m *Span) String() string { return proto.CompactTextString(m) }
func (*Span) ProtoMessage()    {}
func (*Span) Descriptor() ([]byte, []int) {
	return fileDescriptor_65eadb3a877d1afd, []int{1}
}

func (m *Span) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Span.Unmarshal(m, b)
}
func (m *Span) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Span.Marshal(b, m, deterministic)
}
func (m *Span) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Span.Merge(m, src)
}
func (m *Span) XXX_Size() int {
	return xxx_messageInfo_Span.Size(m)
}
func (m *Span) XXX_DiscardUnknown() {
	xxx_messageInfo_Span.DiscardUnknown(m)
}

var xxx_messageInfo_Span proto.InternalMessageInfo

func (m *Span) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func (m *Span) GetSpanId() string {
	if m != nil {
		return m.SpanId
	}
	return ""
}

func (m *Span) GetFromId() string {
	if m != nil {
		return m.FromId
	}
	return ""
}

func (m *Span) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *Span) GetTimes() int64 {
	if m != nil {
		return m.Times
	}
	return 0
}

func (m *Span) GetOperate() string {
	if m != nil {
		return m.Operate
	}
	return ""
}

func (m *Span) GetFlag() bool {
	if m != nil {
		return m.Flag
	}
	return false
}

func (m *Span) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

//用来描述链路/节点生命周期内任何事件的标记
type Tag struct {
	//关联的链路或者节点Id
	OwnId string `protobuf:"bytes,1,opt,name=ownId,proto3" json:"ownId,omitempty"`
	//tag标识
	TagId string `protobuf:"bytes,2,opt,name=tagId,proto3" json:"tagId,omitempty"`
	//事件描述的内容
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	//事件发生的时间
	Times int64 `protobuf:"varint,4,opt,name=times,proto3" json:"times,omitempty"`
	//是否需要记录到日志库中
	Logging bool `protobuf:"varint,5,opt,name=logging,proto3" json:"logging,omitempty"`
	//平台标识
	Platform string `protobuf:"bytes,6,opt,name=Platform,proto3" json:"Platform,omitempty"`
	//日志级别 在logging=true时生效
	LogLevel             string   `protobuf:"bytes,7,opt,name=logLevel,proto3" json:"logLevel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tag) Reset()         { *m = Tag{} }
func (m *Tag) String() string { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()    {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_65eadb3a877d1afd, []int{2}
}

func (m *Tag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tag.Unmarshal(m, b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
}
func (m *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(m, src)
}
func (m *Tag) XXX_Size() int {
	return xxx_messageInfo_Tag.Size(m)
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func (m *Tag) GetOwnId() string {
	if m != nil {
		return m.OwnId
	}
	return ""
}

func (m *Tag) GetTagId() string {
	if m != nil {
		return m.TagId
	}
	return ""
}

func (m *Tag) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Tag) GetTimes() int64 {
	if m != nil {
		return m.Times
	}
	return 0
}

func (m *Tag) GetLogging() bool {
	if m != nil {
		return m.Logging
	}
	return false
}

func (m *Tag) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *Tag) GetLogLevel() string {
	if m != nil {
		return m.LogLevel
	}
	return ""
}

//用来记录需要保存到日志数据库的信息
type Log struct {
	//平台标识
	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	//日志标识
	LogId string `protobuf:"bytes,2,opt,name=logId,proto3" json:"logId,omitempty"`
	//日志内容
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	//记录时间
	Times int64 `protobuf:"varint,4,opt,name=times,proto3" json:"times,omitempty"`
	//日志级别
	Level                string   `protobuf:"bytes,5,opt,name=level,proto3" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_65eadb3a877d1afd, []int{3}
}

func (m *Log) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Log.Unmarshal(m, b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Log.Marshal(b, m, deterministic)
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return xxx_messageInfo_Log.Size(m)
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *Log) GetLogId() string {
	if m != nil {
		return m.LogId
	}
	return ""
}

func (m *Log) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Log) GetTimes() int64 {
	if m != nil {
		return m.Times
	}
	return 0
}

func (m *Log) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

type Ping struct {
	Ping                 bool     `protobuf:"varint,1,opt,name=ping,proto3" json:"ping,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_65eadb3a877d1afd, []int{4}
}

func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

func (m *Ping) GetPing() bool {
	if m != nil {
		return m.Ping
	}
	return false
}

type Pong struct {
	Pong                 bool     `protobuf:"varint,1,opt,name=pong,proto3" json:"pong,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_65eadb3a877d1afd, []int{5}
}

func (m *Pong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pong.Unmarshal(m, b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
}
func (m *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(m, src)
}
func (m *Pong) XXX_Size() int {
	return xxx_messageInfo_Pong.Size(m)
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

func (m *Pong) GetPong() bool {
	if m != nil {
		return m.Pong
	}
	return false
}

type BaseResponse struct {
	//返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	//返回信息
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BaseResponse) Reset()         { *m = BaseResponse{} }
func (m *BaseResponse) String() string { return proto.CompactTextString(m) }
func (*BaseResponse) ProtoMessage()    {}
func (*BaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65eadb3a877d1afd, []int{6}
}

func (m *BaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BaseResponse.Unmarshal(m, b)
}
func (m *BaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BaseResponse.Marshal(b, m, deterministic)
}
func (m *BaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseResponse.Merge(m, src)
}
func (m *BaseResponse) XXX_Size() int {
	return xxx_messageInfo_BaseResponse.Size(m)
}
func (m *BaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BaseResponse proto.InternalMessageInfo

func (m *BaseResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *BaseResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Trace)(nil), "bean.Trace")
	proto.RegisterType((*Span)(nil), "bean.Span")
	proto.RegisterType((*Tag)(nil), "bean.Tag")
	proto.RegisterType((*Log)(nil), "bean.Log")
	proto.RegisterType((*Ping)(nil), "bean.ping")
	proto.RegisterType((*Pong)(nil), "bean.pong")
	proto.RegisterType((*BaseResponse)(nil), "bean.baseResponse")
}

func init() { proto.RegisterFile("bean/tyto.proto", fileDescriptor_65eadb3a877d1afd) }

var fileDescriptor_65eadb3a877d1afd = []byte{
	// 520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xeb, 0xc6, 0x4e, 0x9c, 0x69, 0x25, 0xa4, 0x55, 0x85, 0xac, 0x9c, 0x22, 0x9f, 0x82,
	0x50, 0x8b, 0x54, 0x0e, 0x48, 0x08, 0x0e, 0xb9, 0x11, 0x29, 0x42, 0x95, 0xc9, 0x0b, 0x6c, 0xe2,
	0xc9, 0x2a, 0xc2, 0xf6, 0x58, 0xb6, 0x53, 0xc4, 0x81, 0x13, 0xcf, 0xc3, 0x8b, 0xf0, 0x54, 0x68,
	0x66, 0x77, 0x8d, 0x29, 0x98, 0x53, 0xe7, 0xd7, 0xf1, 0xec, 0xf7, 0x7d, 0xfb, 0x27, 0xf0, 0x6c,
	0x8f, 0xba, 0x7a, 0xd5, 0x7d, 0xed, 0xe8, 0xae, 0x6e, 0xa8, 0x23, 0x15, 0xf2, 0x3f, 0xd2, 0xef,
	0x97, 0x10, 0xed, 0x1a, 0x7d, 0x40, 0xb5, 0x80, 0xb8, 0x2e, 0x74, 0x77, 0xa4, 0xa6, 0x4c, 0x82,
	0x65, 0xb0, 0x9a, 0x67, 0x3d, 0x73, 0xef, 0x70, 0x6e, 0x3b, 0x2a, 0x37, 0x79, 0x72, 0x69, 0x7b,
	0x9e, 0x55, 0x02, 0xb3, 0x8e, 0x17, 0xd8, 0xe4, 0xc9, 0x44, 0x5a, 0x1e, 0xd5, 0x73, 0x98, 0x1e,
	0x1b, 0x99, 0x09, 0xa5, 0xe1, 0x48, 0x26, 0x4e, 0x25, 0xd2, 0xb9, 0x4b, 0xa2, 0x65, 0xb0, 0x8a,
	0x32, 0x8f, 0xea, 0x06, 0x22, 0x2e, 0xdb, 0x64, 0xba, 0x0c, 0x56, 0x93, 0xcc, 0x02, 0x7f, 0x4f,
	0x35, 0x36, 0xba, 0xc3, 0x64, 0x66, 0x15, 0x1c, 0x2a, 0x05, 0xe1, 0xb1, 0xd0, 0x26, 0x89, 0x97,
	0xc1, 0x2a, 0xce, 0xa4, 0x66, 0xd5, 0x73, 0x8b, 0xcd, 0x26, 0x4f, 0xe6, 0x56, 0xd5, 0x12, 0x67,
	0xe0, 0xea, 0xa3, 0x2e, 0x31, 0x01, 0x9b, 0xc1, 0x73, 0xfa, 0x33, 0x80, 0xf0, 0x53, 0xad, 0xab,
	0x61, 0x98, 0xe0, 0xaf, 0x30, 0x6d, 0xad, 0xab, 0x7e, 0x03, 0x1c, 0x0d, 0x42, 0x4e, 0xc6, 0x42,
	0x86, 0x23, 0x21, 0xa3, 0x91, 0x90, 0xd3, 0x7f, 0x87, 0x9c, 0x0d, 0x42, 0x0e, 0x0f, 0x2b, 0xfe,
	0xf3, 0xb0, 0xd2, 0x1f, 0x01, 0x4c, 0x76, 0xda, 0xb0, 0x0e, 0x7d, 0xa9, 0xfa, 0x24, 0x16, 0x44,
	0x5d, 0x9b, 0x3e, 0x86, 0x05, 0xd6, 0xc8, 0xb1, 0x3d, 0xb8, 0x0c, 0x52, 0xff, 0xf6, 0x19, 0x3e,
	0xf1, 0x59, 0x90, 0x31, 0xa7, 0xca, 0x88, 0xff, 0x38, 0xf3, 0xc8, 0x9e, 0x1e, 0xbc, 0x27, 0x1b,
	0xa1, 0x67, 0xee, 0x15, 0x64, 0xb6, 0xf8, 0x88, 0x85, 0x3b, 0xc3, 0x9e, 0xd3, 0x6f, 0x30, 0xd9,
	0x92, 0xf9, 0xef, 0xfd, 0xbb, 0x81, 0xa8, 0xa0, 0x81, 0x69, 0x01, 0xb6, 0x72, 0xa0, 0xaa, 0xc3,
	0xaa, 0xf3, 0x37, 0xcf, 0xe1, 0x88, 0x75, 0x5e, 0x45, 0x1c, 0x44, 0x6e, 0x15, 0x91, 0x5f, 0x40,
	0x58, 0xb3, 0x7d, 0x65, 0xff, 0x8a, 0x76, 0x9c, 0x49, 0x2d, 0x3d, 0x72, 0x3d, 0x1a, 0xf4, 0xa8,
	0x32, 0xe9, 0x3b, 0xb8, 0xde, 0xeb, 0x16, 0x33, 0x6c, 0x6b, 0xaa, 0x5a, 0x39, 0xa6, 0x03, 0xe5,
	0x28, 0xdf, 0x44, 0x99, 0xd4, 0xec, 0xb0, 0xc4, 0xb6, 0xd5, 0x06, 0x9d, 0x73, 0x8f, 0xf7, 0xef,
	0xe1, 0x5a, 0x9e, 0xdd, 0x07, 0x5d, 0xe5, 0x05, 0x36, 0xea, 0x16, 0xe2, 0x75, 0x9e, 0xdb, 0x97,
	0x78, 0x75, 0xc7, 0x4f, 0xf3, 0x4e, 0x60, 0xa1, 0x2c, 0x0c, 0xa5, 0xd2, 0x8b, 0xfb, 0xb7, 0x70,
	0xc5, 0xf7, 0xd5, 0x4f, 0xbf, 0x84, 0xd9, 0x3a, 0xcf, 0xe5, 0x06, 0x83, 0xfd, 0x9e, 0xeb, 0x91,
	0xd9, 0x37, 0x00, 0x3b, 0x6d, 0xfc, 0xe8, 0x0b, 0x98, 0xb2, 0xb0, 0x36, 0x6a, 0xee, 0x64, 0xb5,
	0x19, 0x1f, 0xdc, 0xd2, 0x93, 0x41, 0x3e, 0x39, 0x37, 0xb8, 0xa5, 0xb1, 0xc1, 0x5b, 0x98, 0x7f,
	0x46, 0xac, 0xd7, 0xc5, 0xe9, 0x11, 0xd5, 0x12, 0xc2, 0x07, 0xde, 0x6f, 0x67, 0x94, 0xf7, 0x79,
	0xe1, 0x6b, 0xde, 0xd7, 0x8b, 0xfd, 0x54, 0x7e, 0xa0, 0x5e, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff,
	0x38, 0x6a, 0x62, 0x4e, 0xb3, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TraceHandlerClient is the client API for TraceHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TraceHandlerClient interface {
	AddTrace(ctx context.Context, in *Trace, opts ...grpc.CallOption) (*BaseResponse, error)
}

type traceHandlerClient struct {
	cc *grpc.ClientConn
}

func NewTraceHandlerClient(cc *grpc.ClientConn) TraceHandlerClient {
	return &traceHandlerClient{cc}
}

func (c *traceHandlerClient) AddTrace(ctx context.Context, in *Trace, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/bean.TraceHandler/AddTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TraceHandlerServer is the server API for TraceHandler service.
type TraceHandlerServer interface {
	AddTrace(context.Context, *Trace) (*BaseResponse, error)
}

func RegisterTraceHandlerServer(s *grpc.Server, srv TraceHandlerServer) {
	s.RegisterService(&_TraceHandler_serviceDesc, srv)
}

func _TraceHandler_AddTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Trace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraceHandlerServer).AddTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bean.TraceHandler/AddTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraceHandlerServer).AddTrace(ctx, req.(*Trace))
	}
	return interceptor(ctx, in, info, handler)
}

var _TraceHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bean.TraceHandler",
	HandlerType: (*TraceHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTrace",
			Handler:    _TraceHandler_AddTrace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bean/tyto.proto",
}

// SpanHandlerClient is the client API for SpanHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpanHandlerClient interface {
	AddSpan(ctx context.Context, in *Span, opts ...grpc.CallOption) (*BaseResponse, error)
}

type spanHandlerClient struct {
	cc *grpc.ClientConn
}

func NewSpanHandlerClient(cc *grpc.ClientConn) SpanHandlerClient {
	return &spanHandlerClient{cc}
}

func (c *spanHandlerClient) AddSpan(ctx context.Context, in *Span, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/bean.SpanHandler/AddSpan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpanHandlerServer is the server API for SpanHandler service.
type SpanHandlerServer interface {
	AddSpan(context.Context, *Span) (*BaseResponse, error)
}

func RegisterSpanHandlerServer(s *grpc.Server, srv SpanHandlerServer) {
	s.RegisterService(&_SpanHandler_serviceDesc, srv)
}

func _SpanHandler_AddSpan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Span)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpanHandlerServer).AddSpan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bean.SpanHandler/AddSpan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpanHandlerServer).AddSpan(ctx, req.(*Span))
	}
	return interceptor(ctx, in, info, handler)
}

var _SpanHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bean.SpanHandler",
	HandlerType: (*SpanHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSpan",
			Handler:    _SpanHandler_AddSpan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bean/tyto.proto",
}

// TagHandlerClient is the client API for TagHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TagHandlerClient interface {
	AddTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*BaseResponse, error)
}

type tagHandlerClient struct {
	cc *grpc.ClientConn
}

func NewTagHandlerClient(cc *grpc.ClientConn) TagHandlerClient {
	return &tagHandlerClient{cc}
}

func (c *tagHandlerClient) AddTag(ctx context.Context, in *Tag, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/bean.TagHandler/AddTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagHandlerServer is the server API for TagHandler service.
type TagHandlerServer interface {
	AddTag(context.Context, *Tag) (*BaseResponse, error)
}

func RegisterTagHandlerServer(s *grpc.Server, srv TagHandlerServer) {
	s.RegisterService(&_TagHandler_serviceDesc, srv)
}

func _TagHandler_AddTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagHandlerServer).AddTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bean.TagHandler/AddTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagHandlerServer).AddTag(ctx, req.(*Tag))
	}
	return interceptor(ctx, in, info, handler)
}

var _TagHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bean.TagHandler",
	HandlerType: (*TagHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTag",
			Handler:    _TagHandler_AddTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bean/tyto.proto",
}

// LogHandlerClient is the client API for LogHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogHandlerClient interface {
	AddLog(ctx context.Context, in *Log, opts ...grpc.CallOption) (*BaseResponse, error)
}

type logHandlerClient struct {
	cc *grpc.ClientConn
}

func NewLogHandlerClient(cc *grpc.ClientConn) LogHandlerClient {
	return &logHandlerClient{cc}
}

func (c *logHandlerClient) AddLog(ctx context.Context, in *Log, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/bean.LogHandler/AddLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogHandlerServer is the server API for LogHandler service.
type LogHandlerServer interface {
	AddLog(context.Context, *Log) (*BaseResponse, error)
}

func RegisterLogHandlerServer(s *grpc.Server, srv LogHandlerServer) {
	s.RegisterService(&_LogHandler_serviceDesc, srv)
}

func _LogHandler_AddLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Log)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogHandlerServer).AddLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bean.LogHandler/AddLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogHandlerServer).AddLog(ctx, req.(*Log))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bean.LogHandler",
	HandlerType: (*LogHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLog",
			Handler:    _LogHandler_AddLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bean/tyto.proto",
}

// KeepAliveClient is the client API for KeepAlive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeepAliveClient interface {
	Ping(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
}

type keepAliveClient struct {
	cc *grpc.ClientConn
}

func NewKeepAliveClient(cc *grpc.ClientConn) KeepAliveClient {
	return &keepAliveClient{cc}
}

func (c *keepAliveClient) Ping(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/bean.keepAlive/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeepAliveServer is the server API for KeepAlive service.
type KeepAliveServer interface {
	Ping(context.Context, *Ping) (*Pong, error)
}

func RegisterKeepAliveServer(s *grpc.Server, srv KeepAliveServer) {
	s.RegisterService(&_KeepAlive_serviceDesc, srv)
}

func _KeepAlive_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeepAliveServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bean.keepAlive/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeepAliveServer).Ping(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeepAlive_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bean.keepAlive",
	HandlerType: (*KeepAliveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _KeepAlive_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bean/tyto.proto",
}
